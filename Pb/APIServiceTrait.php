<?php
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

namespace Pb;

trait APIServiceTrait
{
    final public function getMethods()
    {
        return [
            "/pb.API/Stop" => "doStop",
            "/pb.API/CurrentAddress" => "doCurrentAddress",
            "/pb.API/NewAddress" => "doNewAddress",
            "/pb.API/ChainTip" => "doChainTip",
            "/pb.API/Balance" => "doBalance",
            "/pb.API/MasterPrivateKey" => "doMasterPrivateKey",
            "/pb.API/MasterPublicKey" => "doMasterPublicKey",
            "/pb.API/HasKey" => "doHasKey",
            "/pb.API/Params" => "doParams",
            "/pb.API/Transactions" => "doTransactions",
            "/pb.API/GetTransaction" => "doGetTransaction",
            "/pb.API/GetFeePerByte" => "doGetFeePerByte",
            "/pb.API/Spend" => "doSpend",
            "/pb.API/BumpFee" => "doBumpFee",
            "/pb.API/Peers" => "doPeers",
            "/pb.API/AddWatchedScript" => "doAddWatchedScript",
            "/pb.API/GetConfirmations" => "doGetConfirmations",
            "/pb.API/SweepAddress" => "doSweepAddress",
            "/pb.API/ReSyncBlockchain" => "doReSyncBlockchain",
            "/pb.API/CreateMultisigSignature" => "doCreateMultisigSignature",
            "/pb.API/Multisign" => "doMultisign",
            "/pb.API/EstimateFee" => "doEstimateFee",
            "/pb.API/GetKey" => "doGetKey",
            "/pb.API/ListKeys" => "doListKeys",
            "/pb.API/ListAddresses" => "doListAddresses",
            "/pb.API/WalletNotify" => "doWalletNotify",
            "/pb.API/DumpHeaders" => "doDumpHeaders",
        ];
    }

    final public function getLastErrno()
    {
        throw new \RuntimeException(__METHOD__.' can only called in client');
    }

    final public function getLastError()
    {
        throw new \RuntimeException(__METHOD__.' can only called in client');
    }

    final public function doStop(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Stop($request);
    }
    final public function doCurrentAddress(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\KeySelection;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->CurrentAddress($request);
    }
    final public function doNewAddress(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\KeySelection;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->NewAddress($request);
    }
    final public function doChainTip(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ChainTip($request);
    }
    final public function doBalance(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Balance($request);
    }
    final public function doMasterPrivateKey(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->MasterPrivateKey($request);
    }
    final public function doMasterPublicKey(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->MasterPublicKey($request);
    }
    final public function doHasKey(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Address;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->HasKey($request);
    }
    final public function doParams(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Params($request);
    }
    final public function doTransactions(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Transactions($request);
    }
    final public function doGetTransaction(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Txid;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->GetTransaction($request);
    }
    final public function doGetFeePerByte(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\FeeLevelSelection;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->GetFeePerByte($request);
    }
    final public function doSpend(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\SpendInfo;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Spend($request);
    }
    final public function doBumpFee(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Txid;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->BumpFee($request);
    }
    final public function doPeers(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Peers($request);
    }
    final public function doAddWatchedScript(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Address;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->AddWatchedScript($request);
    }
    final public function doGetConfirmations(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Txid;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->GetConfirmations($request);
    }
    final public function doSweepAddress(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\SweepInfo;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->SweepAddress($request);
    }
    final public function doReSyncBlockchain(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Google\Protobuf\Timestamp;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ReSyncBlockchain($request);
    }
    final public function doCreateMultisigSignature(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\CreateMultisigInfo;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->CreateMultisigSignature($request);
    }
    final public function doMultisign(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\MultisignInfo;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->Multisign($request);
    }
    final public function doEstimateFee(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\EstimateFeeData;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->EstimateFee($request);
    }
    final public function doGetKey(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Address;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->GetKey($request);
    }
    final public function doListKeys(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ListKeys($request);
    }
    final public function doListAddresses(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ListAddresses($request);
    }
    final public function doWalletNotify(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->WalletNotify($request);
    }
    final public function doDumpHeaders(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Pb\Empty;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->DumpHeaders($request);
    }
}
